https://usemage.ai/result/bbdf1a14-6f86-44a6-a040-3b99a6e47d91
app PosAff {
  wasp: {
    version: "^0.13.0"
  },
  title: "PosAff",
  client: {
    rootComponent: import { Layout } from "@src/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  }
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@src/pages/auth/Signup.jsx"
}

entity User {=psl
    id           Int           @id @default(autoincrement())
    affirmations Affirmation[]
psl=}

entity Affirmation {=psl
    id      Int    @id @default(autoincrement())
    message String
    user    User   @relation(fields: [userId], references: [id])
    userId  Int
psl=}

action createAffirmation {
  fn: import { createAffirmation } from "@src/actions.js",
  entities: [Affirmation]
}

action deleteAffirmation {
  fn: import { deleteAffirmation } from "@src/actions.js",
  entities: [Affirmation]
}

action updateAffirmation {
  fn: import { updateAffirmation } from "@src/actions.js",
  entities: [Affirmation]
}

query getUserAffirmations {
  fn: import { getUserAffirmations } from "@src/queries.js",
  entities: [Affirmation]
}

query getAffirmation {
  fn: import { getAffirmation } from "@src/queries.js",
  entities: [Affirmation]
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import DashboardPage from "@src/pages/Dashboard.jsx",
  authRequired: true
}

route AffirmationRoute { path: "/affirmation/:affirmationId", to: AffirmationPage }
page AffirmationPage {
  component: import AffirmationPage from "@src/pages/Affirmation.jsx",
  authRequired: true
}
